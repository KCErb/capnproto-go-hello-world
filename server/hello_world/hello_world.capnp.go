// Code generated by capnpc-go. DO NOT EDIT.

package hello_world

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Greeter capnp.Client

// Greeter_TypeID is the unique identifier for the type Greeter.
const Greeter_TypeID = 0xb931119f633e2c89

func (c Greeter) Greet(ctx context.Context, params func(Greeter_greet_Params) error) (Greeter_greet_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb931119f633e2c89,
			MethodID:      0,
			InterfaceName: "hello_world.capnp:Greeter",
			MethodName:    "greet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Greeter_greet_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Greeter_greet_Results_Future{Future: ans.Future()}, release

}

func (c Greeter) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Greeter) String() string {
	return "Greeter(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Greeter) AddRef() Greeter {
	return Greeter(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Greeter) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Greeter) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Greeter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Greeter) DecodeFromPtr(p capnp.Ptr) Greeter {
	return Greeter(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Greeter) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Greeter) IsSame(other Greeter) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Greeter) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Greeter) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Greeter_Server is a Greeter with a local implementation.
type Greeter_Server interface {
	Greet(context.Context, Greeter_greet) error
}

// Greeter_NewServer creates a new Server from an implementation of Greeter_Server.
func Greeter_NewServer(s Greeter_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Greeter_Methods(nil, s), s, c)
}

// Greeter_ServerToClient creates a new Client from an implementation of Greeter_Server.
// The caller is responsible for calling Release on the returned Client.
func Greeter_ServerToClient(s Greeter_Server) Greeter {
	return Greeter(capnp.NewClient(Greeter_NewServer(s)))
}

// Greeter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Greeter_Methods(methods []server.Method, s Greeter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb931119f633e2c89,
			MethodID:      0,
			InterfaceName: "hello_world.capnp:Greeter",
			MethodName:    "greet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Greet(ctx, Greeter_greet{call})
		},
	})

	return methods
}

// Greeter_greet holds the state for a server call to Greeter.greet.
// See server.Call for documentation.
type Greeter_greet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Greeter_greet) Args() Greeter_greet_Params {
	return Greeter_greet_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Greeter_greet) AllocResults() (Greeter_greet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Results(r), err
}

// Greeter_List is a list of Greeter.
type Greeter_List = capnp.CapList[Greeter]

// NewGreeter creates a new list of Greeter.
func NewGreeter_List(s *capnp.Segment, sz int32) (Greeter_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Greeter](l), err
}

type Greeter_greet_Params capnp.Struct

// Greeter_greet_Params_TypeID is the unique identifier for the type Greeter_greet_Params.
const Greeter_greet_Params_TypeID = 0x976c40608621cb95

func NewGreeter_greet_Params(s *capnp.Segment) (Greeter_greet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Params(st), err
}

func NewRootGreeter_greet_Params(s *capnp.Segment) (Greeter_greet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Params(st), err
}

func ReadRootGreeter_greet_Params(msg *capnp.Message) (Greeter_greet_Params, error) {
	root, err := msg.Root()
	return Greeter_greet_Params(root.Struct()), err
}

func (s Greeter_greet_Params) String() string {
	str, _ := text.Marshal(0x976c40608621cb95, capnp.Struct(s))
	return str
}

func (s Greeter_greet_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Greeter_greet_Params) DecodeFromPtr(p capnp.Ptr) Greeter_greet_Params {
	return Greeter_greet_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Greeter_greet_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Greeter_greet_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Greeter_greet_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Greeter_greet_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Greeter_greet_Params) Person() (Person, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Person(p.Struct()), err
}

func (s Greeter_greet_Params) HasPerson() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Greeter_greet_Params) SetPerson(v Person) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPerson sets the person field to a newly
// allocated Person struct, preferring placement in s's segment.
func (s Greeter_greet_Params) NewPerson() (Person, error) {
	ss, err := NewPerson(capnp.Struct(s).Segment())
	if err != nil {
		return Person{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Greeter_greet_Params_List is a list of Greeter_greet_Params.
type Greeter_greet_Params_List = capnp.StructList[Greeter_greet_Params]

// NewGreeter_greet_Params creates a new list of Greeter_greet_Params.
func NewGreeter_greet_Params_List(s *capnp.Segment, sz int32) (Greeter_greet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Greeter_greet_Params](l), err
}

// Greeter_greet_Params_Future is a wrapper for a Greeter_greet_Params promised by a client call.
type Greeter_greet_Params_Future struct{ *capnp.Future }

func (f Greeter_greet_Params_Future) Struct() (Greeter_greet_Params, error) {
	p, err := f.Future.Ptr()
	return Greeter_greet_Params(p.Struct()), err
}
func (p Greeter_greet_Params_Future) Person() Person_Future {
	return Person_Future{Future: p.Future.Field(0, nil)}
}

type Greeter_greet_Results capnp.Struct

// Greeter_greet_Results_TypeID is the unique identifier for the type Greeter_greet_Results.
const Greeter_greet_Results_TypeID = 0x9919f8aa42ad541b

func NewGreeter_greet_Results(s *capnp.Segment) (Greeter_greet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Results(st), err
}

func NewRootGreeter_greet_Results(s *capnp.Segment) (Greeter_greet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Results(st), err
}

func ReadRootGreeter_greet_Results(msg *capnp.Message) (Greeter_greet_Results, error) {
	root, err := msg.Root()
	return Greeter_greet_Results(root.Struct()), err
}

func (s Greeter_greet_Results) String() string {
	str, _ := text.Marshal(0x9919f8aa42ad541b, capnp.Struct(s))
	return str
}

func (s Greeter_greet_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Greeter_greet_Results) DecodeFromPtr(p capnp.Ptr) Greeter_greet_Results {
	return Greeter_greet_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Greeter_greet_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Greeter_greet_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Greeter_greet_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Greeter_greet_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Greeter_greet_Results) Response() (Greeting, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Greeting(p.Struct()), err
}

func (s Greeter_greet_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Greeter_greet_Results) SetResponse(v Greeting) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Greeting struct, preferring placement in s's segment.
func (s Greeter_greet_Results) NewResponse() (Greeting, error) {
	ss, err := NewGreeting(capnp.Struct(s).Segment())
	if err != nil {
		return Greeting{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Greeter_greet_Results_List is a list of Greeter_greet_Results.
type Greeter_greet_Results_List = capnp.StructList[Greeter_greet_Results]

// NewGreeter_greet_Results creates a new list of Greeter_greet_Results.
func NewGreeter_greet_Results_List(s *capnp.Segment, sz int32) (Greeter_greet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Greeter_greet_Results](l), err
}

// Greeter_greet_Results_Future is a wrapper for a Greeter_greet_Results promised by a client call.
type Greeter_greet_Results_Future struct{ *capnp.Future }

func (f Greeter_greet_Results_Future) Struct() (Greeter_greet_Results, error) {
	p, err := f.Future.Ptr()
	return Greeter_greet_Results(p.Struct()), err
}
func (p Greeter_greet_Results_Future) Response() Greeting_Future {
	return Greeting_Future{Future: p.Future.Field(0, nil)}
}

type Person capnp.Struct

// Person_TypeID is the unique identifier for the type Person.
const Person_TypeID = 0xafa5a7b40061881b

func NewPerson(s *capnp.Segment) (Person, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Person(st), err
}

func NewRootPerson(s *capnp.Segment) (Person, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Person(st), err
}

func ReadRootPerson(msg *capnp.Message) (Person, error) {
	root, err := msg.Root()
	return Person(root.Struct()), err
}

func (s Person) String() string {
	str, _ := text.Marshal(0xafa5a7b40061881b, capnp.Struct(s))
	return str
}

func (s Person) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Person) DecodeFromPtr(p capnp.Ptr) Person {
	return Person(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Person) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Person) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Person) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Person) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Person) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Person) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Person) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Person) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Person_List is a list of Person.
type Person_List = capnp.StructList[Person]

// NewPerson creates a new list of Person.
func NewPerson_List(s *capnp.Segment, sz int32) (Person_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Person](l), err
}

// Person_Future is a wrapper for a Person promised by a client call.
type Person_Future struct{ *capnp.Future }

func (f Person_Future) Struct() (Person, error) {
	p, err := f.Future.Ptr()
	return Person(p.Struct()), err
}

type Greeting capnp.Struct

// Greeting_TypeID is the unique identifier for the type Greeting.
const Greeting_TypeID = 0x90c20959e2ef0ac9

func NewGreeting(s *capnp.Segment) (Greeting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeting(st), err
}

func NewRootGreeting(s *capnp.Segment) (Greeting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeting(st), err
}

func ReadRootGreeting(msg *capnp.Message) (Greeting, error) {
	root, err := msg.Root()
	return Greeting(root.Struct()), err
}

func (s Greeting) String() string {
	str, _ := text.Marshal(0x90c20959e2ef0ac9, capnp.Struct(s))
	return str
}

func (s Greeting) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Greeting) DecodeFromPtr(p capnp.Ptr) Greeting {
	return Greeting(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Greeting) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Greeting) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Greeting) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Greeting) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Greeting) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Greeting) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Greeting) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Greeting) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Greeting_List is a list of Greeting.
type Greeting_List = capnp.StructList[Greeting]

// NewGreeting creates a new list of Greeting.
func NewGreeting_List(s *capnp.Segment, sz int32) (Greeting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Greeting](l), err
}

// Greeting_Future is a wrapper for a Greeting promised by a client call.
type Greeting_Future struct{ *capnp.Future }

func (f Greeting_Future) Struct() (Greeting, error) {
	p, err := f.Future.Ptr()
	return Greeting(p.Struct()), err
}

const schema_fbc2c91ea16d009d = "x\xda\x128\xef\xc0b\xc8+\xcf\xcc\xc0\x14\xa8\xc2\xca" +
	"\xf6\xff$\xd7\xfbG\x91\x9c\x87&0\x08\x0a1\xfe\x9d" +
	"\x9b\xbbP\xee\xe4\xa1\xdf\xac\x8c\xec\x0c\x0c\xc2\xa5\x8c\xb7" +
	"\x84\x1b\xc1\xacZF{\x06\xc6\xffSO+\xb6%8" +
	"\xe4Lg\x10\x94bd`\x00\xab1\x9e\xcbh\xc5\xc8" +
	"\xc0(\xbc\x14\xac@:d\xad\xd3\xaa\x1f\x923\x91\x15" +
	"\x1cet\x02)8\x0bR\xf0]\xba#q\xcb\xf2\xa5" +
	"\xeb1l\xfa\xc8xJ\xf8/\x98\xf5\x13lP\xa7\x8e" +
	"]\xf2|A\xc3\x9d\x0c\x82B\xcc0\x95\x0c\x8c\xc2\x92" +
	"L\x97\x84U\x99@\xca\x14\x99\xdc\x85=\x99\xd8\x19t" +
	"\xfeg\xa4\xe6\xe4\xe4\xc7\x97\xe73\x15\xe5\xa4\xe8%'" +
	"\x16\xe4\x15X\xb9\x17\xa5\xa6\x96d2\xe7\xa5\x0702" +
	"\x06\xb20\xb300\xb0020\x08\xf2j10\x04" +
	"r03\x06\x8a01\xf2\x97\xa4V\x940\xf200" +
	"1\xf200\xc2\xcd`F3#\xb5H/\x1dD\xab" +
	"\xd8\x07$\x16%\xe6\x16#\x1bf\x850\xcc\xbe \xb5" +
	"\xa88?\x8fQ\x00\xe6?\x06FF\x01$cYp" +
	"\x19\x1b\x94Z\\\x9aSR\xcc\x80l\xae\x17\x03C " +
	"\x0f3c\xa0\x04\x13\xe3\xff\xa2\xd4\xe2\x82\xfc\xbc\xe2T" +
	"\x06\x06\x06F\x01DD\xa1\x19\x8f\xe4\xf3\x00\xb0C\x18" +
	"\x18\xf0x</17\x15\xc3\xe3\xe8\x81\x97\xcaX\x04" +
	"1\x82\x95\x81\x01\x1e\xed\x8c\xb0\xe8\x15\x144b`\x12" +
	"de\x97\x07\xfb\xc2\x811\x80\x91\x11\x10\x00\x00\xff\xff" +
	"@\xd4\xa0\xfe"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_fbc2c91ea16d009d,
		Nodes: []uint64{
			0x90c20959e2ef0ac9,
			0x976c40608621cb95,
			0x9919f8aa42ad541b,
			0xafa5a7b40061881b,
			0xb931119f633e2c89,
		},
		Compressed: true,
	})
}
